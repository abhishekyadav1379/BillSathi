# Form implementation generated from reading ui file 'c:\Users\mrabh\OneDrive\Desktop\Pyqt\Main_Software\Customer_DetailsGUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


import datetime
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QTableWidgetItem, QHeaderView, QApplication, QTableWidgetItem
from PyQt6.QtWidgets import QTableWidgetItem, QMenu, QMessageBox, QToolTip
from PyQt6.QtGui import QStandardItemModel, QDoubleValidator, QFont, QStandardItem, QAction, QColor, QGuiApplication
from PyQt6.QtCore import Qt
from DialogBox_alltype import *
from All_function import all_function, TooltipDelegate
from NewEntryCode import NewEntry
from pdf_create import *
import sqlite3
import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QMessageBox
from PyQt6.QtCore import QTimer, QDate
from NewEntryCode import NewEntry, FloatOrADelegate, FloatOrAValidator
import webbrowser
import icons_rc


class Ui_Customer_details(object):
    def setupUi(self, Customer_details):
        Customer_details.setObjectName("Customer_details")
        Customer_details.resize(1220, 755)
        Customer_details.setMaximumSize(QtCore.QSize(1600, 800))
        Customer_details.setStyleSheet("QLineEdit {\n"
                                       "                background-color: #f3f3f3;\n"
                                       "                border: 2px solid #c0c0c0;\n"
                                       "                border-radius: 5px;\n"
                                       "                padding: 5px;\n"
                                       "                selection-background-color: #a8a8a8;\n"
                                       "            }\n"
                                       "\n"
                                       "            QLineEdit:focus {\n"
                                       "                border: 2px solid #707070;\n"
                                       "                background-color: #ffffff;\n"
                                       "            }\n"
                                       "\n"
                                       "\n"
                                       "QLabel {\n"
                                       "    font-family: Russo One;\n"
                                       "    font-size: 22px;\n"
                                       "    border : 0px;\n"
                                       "}\n"
                                       "QDialog{\n"
                                       "background-color: rgb(50, 62, 67);\n"
                                       "}\n"
                                       "")
        self.gridLayout_5 = QtWidgets.QGridLayout(Customer_details)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.frame_4 = QtWidgets.QFrame(parent=Customer_details)
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 180))
        self.frame_4.setStyleSheet("#frame_4{\n"
                                   "border: 2px solid #c0c0c0;\n"
                                   "border-radius: 10px;\n"
                                   "background-color: white;\n"
                                   "}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.frame = QtWidgets.QFrame(parent=self.frame_4)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.name_label = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.name_label.setFont(font)
        self.name_label.setObjectName("name_label")
        self.verticalLayout.addWidget(self.name_label)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.id_label = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.id_label.setFont(font)
        self.id_label.setStyleSheet("QLabel{\n"
                                    " color: blue;\n"
                                    "}")
        self.id_label.setObjectName("id_label")
        self.horizontalLayout_3.addWidget(self.id_label)
        self.toolButton_copy = QtWidgets.QToolButton(parent=self.frame)
        self.toolButton_copy.setStyleSheet("QToolButton{\n"
                                           "border: None;\n"
                                           "margin-bottom: 10px;\n"
                                           "margin-right: 15px\n"
                                           "}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/copy-96.png"),
                       QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_copy.setIcon(icon)
        self.toolButton_copy.setObjectName("toolButton_copy")
        self.horizontalLayout_3.addWidget(self.toolButton_copy)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.place_label = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.place_label.setFont(font)
        self.place_label.setObjectName("place_label")
        self.verticalLayout.addWidget(self.place_label)
        self.phone_label = QtWidgets.QLabel(parent=self.frame)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.phone_label.setFont(font)
        self.phone_label.setObjectName("phone_label")
        self.verticalLayout.addWidget(self.phone_label)
        self.gridLayout_4.addWidget(self.frame, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(
            40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_4.addItem(spacerItem, 0, 1, 1, 1)
        self.frame_2 = QtWidgets.QFrame(parent=self.frame_4)
        self.frame_2.setStyleSheet("QFrame {\n"
                                   "padding-left: 0px;\n"
                                   "}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_2)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_rem_total = QtWidgets.QLineEdit(parent=self.frame_2)
        self.lineEdit_rem_total.setStyleSheet("QLineEdit{\n"
                                              "    color:red;\n"
                                              "    font-size: 16px;\n"
                                              "}")
        self.lineEdit_rem_total.setReadOnly(True)
        self.lineEdit_rem_total.setObjectName("lineEdit_rem_total")
        self.gridLayout.addWidget(self.lineEdit_rem_total, 1, 2, 1, 1)
        self.remaining_label = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.remaining_label.setFont(font)
        self.remaining_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight |
                                          QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.remaining_label.setObjectName("remaining_label")
        self.gridLayout.addWidget(self.remaining_label, 1, 1, 1, 1)
        self.pushButton_submit = QtWidgets.QPushButton(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(-1)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_submit.setFont(font)
        self.pushButton_submit.setStyleSheet("QPushButton {\n"
                                             "    background-color: rgb(29,94,255);\n"
                                             "    color: white;\n"
                                             "    border-radius: 6px;\n"
                                             "    border: none;\n"
                                             "    padding: 8px 16px;\n"
                                             "color: white;\n"
                                             "    font-size: 18px;\n"
                                             "    font-weight: bold;\n"
                                             "    font-family: \"Arial\";\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:hover {\n"
                                             "    background-color: skyblue;\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:pressed {\n"
                                             "    background-color: dodgerblue;\n"
                                             "}")
        self.pushButton_submit.setObjectName("pushButton_submit")
        self.gridLayout.addWidget(self.pushButton_submit, 3, 2, 1, 1)
        self.lineEdit_comment = QtWidgets.QLineEdit(parent=self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.lineEdit_comment.setFont(font)
        self.lineEdit_comment.setStyleSheet("QLineEdit{\n"
                                            "margin-bottom: 0px;\n"
                                            "}")
        self.lineEdit_comment.setText("")
        self.lineEdit_comment.setObjectName("lineEdit_comment")
        self.gridLayout.addWidget(self.lineEdit_comment, 3, 1, 1, 1)
        self.frame_5 = QtWidgets.QFrame(parent=self.frame_2)
        self.frame_5.setStyleSheet("QToolButton{\n"
                                   "    font-size: 14px;\n"
                                   "\n"
                                   "}")
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_5)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.toolButton_pdf = QtWidgets.QToolButton(parent=self.frame_5)
        self.toolButton_pdf.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons8-pdf-100.png"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_pdf.setIcon(icon1)
        self.toolButton_pdf.setIconSize(QtCore.QSize(30, 30))
        self.toolButton_pdf.setToolButtonStyle(
            QtCore.Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        self.toolButton_pdf.setObjectName("toolButton_pdf")
        self.gridLayout_3.addWidget(self.toolButton_pdf, 0, 1, 1, 1)
        self.comboBox = QtWidgets.QComboBox(parent=self.frame_5)
        self.comboBox.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.comboBox.setStyleSheet("QComboBox {\n"
                                    "    border-radius: 3px;\n"
                                    "    padding: 5px;\n"
                                    "    font-family: Belanosima;\n"
                                    "    font-size: 18px;\n"
                                    "    background-color: rgb(231, 255, 215);\n"
                                    "}\n"
                                    "")
        self.comboBox.setSizeAdjustPolicy(
            QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContents)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout_3.addWidget(
            self.comboBox, 3, 1, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.toolButton_pdf_ = QtWidgets.QToolButton(parent=self.frame_5)
        self.toolButton_pdf_.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        self.toolButton_pdf_.setIcon(icon1)
        self.toolButton_pdf_.setIconSize(QtCore.QSize(30, 30))
        self.toolButton_pdf_.setToolButtonStyle(
            QtCore.Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        self.toolButton_pdf_.setObjectName("toolButton_pdf_")
        self.gridLayout_3.addWidget(self.toolButton_pdf_, 0, 0, 1, 1)
        self.toolButton_message = QtWidgets.QToolButton(parent=self.frame_5)
        self.toolButton_message.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons8-message-80.png"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_message.setIcon(icon2)
        self.toolButton_message.setIconSize(QtCore.QSize(30, 30))
        self.toolButton_message.setToolButtonStyle(
            QtCore.Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        self.toolButton_message.setObjectName("toolButton_message")
        self.gridLayout_3.addWidget(self.toolButton_message, 1, 0, 1, 1)
        self.toolButton_entry = QtWidgets.QToolButton(parent=self.frame_5)
        self.toolButton_entry.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/new_entry_icon.png"),
                        QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.toolButton_entry.setIcon(icon3)
        self.toolButton_entry.setIconSize(QtCore.QSize(30, 30))
        self.toolButton_entry.setToolButtonStyle(
            QtCore.Qt.ToolButtonStyle.ToolButtonTextBesideIcon)
        self.toolButton_entry.setObjectName("toolButton_entry")
        self.gridLayout_3.addWidget(self.toolButton_entry, 1, 1, 1, 1)
        self.dateEdit = QtWidgets.QDateEdit(parent=self.frame_5)
        self.dateEdit.setStyleSheet("QDateEdit {\n"
                                    "  background-color: rgb(213, 202, 255);\n"
                                    "  border: 1px solid #dcdcdc;\n"
                                    "  border-radius: 4px;\n"
                                    "  selection-background-color: rgb(215, 192, 255);\n"
                                    "  selection-color: #333333;\n"
                                    "  font-size: 16px;\n"
                                    "  color: #333333;\n"
                                    "}\n"
                                    "")
        self.dateEdit.setObjectName("dateEdit")
        self.gridLayout_3.addWidget(self.dateEdit, 3, 0, 1, 1)
        self.gridLayout.addWidget(self.frame_5, 0, 0, 4, 1)
        self.lineEdit_give = QtWidgets.QLineEdit(parent=self.frame_2)
        self.lineEdit_give.setStyleSheet("QLineEdit{\n"
                                         "    color:red;\n"
                                         "    font-size: 16px;\n"
                                         "}")
        self.lineEdit_give.setObjectName("lineEdit_give")
        self.gridLayout.addWidget(self.lineEdit_give, 2, 2, 1, 1)
        self.give_label = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.give_label.setFont(font)
        self.give_label.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        self.give_label.setStyleSheet("")
        self.give_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight |
                                     QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.give_label.setObjectName("give_label")
        self.gridLayout.addWidget(self.give_label, 2, 1, 1, 1)
        self.overall_total_label = QtWidgets.QLabel(parent=self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Russo One")
        font.setPointSize(-1)
        self.overall_total_label.setFont(font)
        self.overall_total_label.setLayoutDirection(
            QtCore.Qt.LayoutDirection.LeftToRight)
        self.overall_total_label.setStyleSheet("")
        self.overall_total_label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight | QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.overall_total_label.setObjectName("overall_total_label")
        self.gridLayout.addWidget(self.overall_total_label, 0, 1, 1, 1)
        self.lineEdit_overall_total = QtWidgets.QLineEdit(parent=self.frame_2)
        self.lineEdit_overall_total.setStyleSheet("QLineEdit{\n"
                                                  "    color:red;\n"
                                                  "    font-size: 16px;\n"
                                                  "}")
        self.lineEdit_overall_total.setObjectName("lineEdit_overall_total")
        self.gridLayout.addWidget(self.lineEdit_overall_total, 0, 2, 1, 1)
        self.gridLayout_4.addWidget(self.frame_2, 0, 2, 1, 1)
        self.gridLayout_5.addWidget(self.frame_4, 0, 0, 1, 1)
        self.frame_3 = QtWidgets.QFrame(parent=Customer_details)
        self.frame_3.setStyleSheet("#frame_3{\n"
                                   "border: 2px solid #c0c0c0;\n"
                                   "border-radius: 10px;\n"
                                   "background-color: white;\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "QTableWidget {\n"
                                   "    background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
                                   "                                      stop:0 #F7F7F7, stop:1 #E8E8E8);\n"
                                   "    gridline-color: #DDDDDD;\n"
                                   "    selection-background-color: #E6F1FF;\n"
                                   "    selection-color: #333333;\n"
                                   "    border-radius: 1px;\n"
                                   "}\n"
                                   "QTableWidget::item {\n"
                                   "    text-align: center;\n"
                                   "}\n"
                                   "QTableWidget QHeaderView::section {\n"
                                   "    background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
                                   "                                      stop:0 #4876AF, stop:1 #286090);\n"
                                   "    color: white;\n"
                                   "    font-weight: bold;\n"
                                   "    padding: 6px;\n"
                                   "    border: none;\n"
                                   "    border-bottom: 1px solid #355F8C;\n"
                                   "    border-radius: 4px;\n"
                                   "}\n"
                                   "\n"
                                   "QTableWidget QHeaderView::section:second {\n"
                                   "    border-top-right-radius: 14px;\n"
                                   "}\n"
                                   "\n"
                                   "QTableWidget::item:selected {\n"
                                   "    background-color: #B3D7FF;\n"
                                   "    color: #333333;\n"
                                   "}\n"
                                   "QTableWidget QHeaderView::section:pressed {\n"
                                   "    background-color: #4F8BC9;\n"
                                   "}\n"
                                   "\n"
                                   "\n"
                                   "\n"
                                   "QTableWidget::item:hover {\n"
                                   "    background-color: #E6F1FF;\n"
                                   "}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.tableWidget_desc = QtWidgets.QTableWidget(parent=self.frame_3)
        self.tableWidget_desc.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.AnyKeyPressed)
        self.tableWidget_desc.setObjectName("tableWidget_desc")
        self.tableWidget_desc.setColumnCount(6)
        self.tableWidget_desc.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_desc.setHorizontalHeaderItem(5, item)
        self.tableWidget_desc.horizontalHeader().setStretchLastSection(True)
        self.gridLayout_2.addWidget(self.tableWidget_desc, 1, 0, 1, 1)
        self.tableWidget_money = QtWidgets.QTableWidget(parent=self.frame_3)
        self.tableWidget_money.setEditTriggers(
            QtWidgets.QAbstractItemView.EditTrigger.AnyKeyPressed)
        self.tableWidget_money.setObjectName("tableWidget_money")
        self.tableWidget_money.setColumnCount(6)
        self.tableWidget_money.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_money.setHorizontalHeaderItem(5, item)
        self.tableWidget_money.horizontalHeader().setStretchLastSection(True)
        self.gridLayout_2.addWidget(self.tableWidget_money, 1, 1, 1, 1)
        self.label = QtWidgets.QLabel(parent=self.frame_3)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(
            self.label, 0, 0, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.label_2 = QtWidgets.QLabel(parent=self.frame_3)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(
            self.label_2, 0, 1, 1, 1, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.gridLayout_5.addWidget(self.frame_3, 1, 0, 1, 1)

        self.retranslateUi(Customer_details)
        QtCore.QMetaObject.connectSlotsByName(Customer_details)

    def retranslateUi(self, Customer_details):
        _translate = QtCore.QCoreApplication.translate
        Customer_details.setWindowTitle(_translate(
            "Customer_details", "Customer Details"))
        self.name_label.setText(_translate("Customer_details", "Name"))
        self.id_label.setText(_translate("Customer_details", "ID"))
        self.toolButton_copy.setText(_translate("Customer_details", "..."))
        self.place_label.setText(_translate("Customer_details", "Place"))
        self.phone_label.setText(_translate("Customer_details", "Phone"))
        self.remaining_label.setText(_translate(
            "Customer_details", "Remaining Amount"))
        self.pushButton_submit.setText(
            _translate("Customer_details", "Submit"))
        self.lineEdit_comment.setPlaceholderText(
            _translate("Customer_details", "Comments"))
        self.toolButton_pdf.setText(
            _translate("Customer_details", "PDF       "))
        self.comboBox.setItemText(0, _translate("Customer_details", "Cash"))
        self.comboBox.setItemText(1, _translate("Customer_details", "UPI"))
        self.comboBox.setItemText(2, _translate("Customer_details", "Cheaque"))
        self.toolButton_pdf_.setText(
            _translate("Customer_details", "Testing  "))
        self.toolButton_message.setText(
            _translate("Customer_details", "Message"))
        self.toolButton_entry.setText(
            _translate("Customer_details", "Entry     "))
        self.give_label.setText(_translate("Customer_details", "Paid"))
        self.overall_total_label.setText(
            _translate("Customer_details", "Overall Total"))
        item = self.tableWidget_desc.horizontalHeaderItem(0)
        item.setText(_translate("Customer_details", "Date"))
        item = self.tableWidget_desc.horizontalHeaderItem(1)
        item.setText(_translate("Customer_details", "Description"))
        item = self.tableWidget_desc.horizontalHeaderItem(2)
        item.setText(_translate("Customer_details", "quantity"))
        item = self.tableWidget_desc.horizontalHeaderItem(3)
        item.setText(_translate("Customer_details", "Rate"))
        item = self.tableWidget_desc.horizontalHeaderItem(4)
        item.setText(_translate("Customer_details", "Value"))
        item = self.tableWidget_desc.horizontalHeaderItem(5)
        item.setText(_translate("Customer_details", "Time"))
        item = self.tableWidget_money.horizontalHeaderItem(0)
        item.setText(_translate("Customer_details", "Date"))
        item = self.tableWidget_money.horizontalHeaderItem(1)
        item.setText(_translate("Customer_details", "Give"))
        item = self.tableWidget_money.horizontalHeaderItem(2)
        item.setText(_translate("Customer_details", "Total"))
        item = self.tableWidget_money.horizontalHeaderItem(3)
        item.setText(_translate("Customer_details", "Method"))
        item = self.tableWidget_money.horizontalHeaderItem(4)
        item.setText(_translate("Customer_details", "Time"))
        item = self.tableWidget_money.horizontalHeaderItem(5)
        item.setText(_translate("Customer_details", "Comments"))
        self.label.setText(_translate("Customer_details", "Product Details"))
        self.label_2.setText(_translate(
            "Customer_details", "Cash Flow Details"))


# -------------------------Main Editing-------#
        self.pushButton_submit.clicked.connect(self.submit_btn)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.tableWidget_money.setFont(font)
        self.tableWidget_desc.setFont(font)
        self.tableWidget_money.setAlternatingRowColors(
            True)  # Enable alternating row colors
        self.tableWidget_desc.setAlternatingRowColors(
            True)  # Enable alternating row colors
        # Set the background color for alternating rows
        width, height, taskbar_height = self.show_screen_dimensions()
        Customer_details.resize(width, height - taskbar_height)
        self.dateEdit.setDate(QtCore.QDate.currentDate())
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.dateChanged.connect(self.on_date_changed)
        # Customer_details.showMaximized()

        # menu
        self.tableWidget_desc.setContextMenuPolicy(
            Qt.ContextMenuPolicy.CustomContextMenu)
        self.tableWidget_desc.customContextMenuRequested.connect(
            self.show_context_menu)

        self.tableWidget_money.setContextMenuPolicy(
            Qt.ContextMenuPolicy.CustomContextMenu)
        self.tableWidget_money.customContextMenuRequested.connect(
            self.show_context_menu_money)
        # self.tableWidget_desc.setColumnHidden(5,True)
        self.tableWidget_money.setColumnHidden(5, True)
        self.tableWidget_money.setMouseTracking(True)
        # self.tableWidget_desc.setMouseTracking(True)
        # self.tableWidget_desc.resizeColumnsToContents()
        # self.tableWidget_money.resizeColumnsToContents()
        # self.tableWidget_desc
        self.toolButton_pdf.clicked.connect(self.customer_pdf)
        self.toolButton_entry.clicked.connect(self.new_entry)
        self.toolButton_copy.clicked.connect(self.copyid)
        self.delegate = TooltipDelegate()
        self.tableWidget_desc.setItemDelegate(self.delegate)
        self.lineEdit_give.setValidator(QDoubleValidator())
    # Get cusotmer id from udhari dialog
    # cust_id = 0
    # current_date = datetime.date.today().strftime("%d-%m-%Y")
        self.current_date = QtCore.QDate.currentDate().toString("yyyy-MM-dd")
    current_time = QtCore.QTime.currentTime().toString("HH:mm:ss")
    # time_str = current_time.toString("hh:mm:ss AP")
    # current_time = datetime.datetime.now().time().strftime("%H:%M:%S")
    fn = all_function()

    def on_date_changed(self):
        self.current_date = self.dateEdit.date().toString("yyyy-MM-dd")

    def copyid(self):
        id = self.id_label.text()
        clipboard = QGuiApplication.clipboard()
        clipboard.clear()
        clipboard.setText(id)

    # def on_date_changed(self):
        # if self.datechanged == False:
        #     result = DialogBox.show_yes_no_dialog("Do you want to change date?")
        #     if result == False:
        #         return
        #     self.datechanged = True
        # self.timer.start(2147483642)
        # self.date_label.setStyleSheet("color: red;")
        # date = self.dateEdit.date().toString("dd-MM-yyyy")
        # self.date_label.setText(date)

    def new_entry(self):
        id = self.id_label.text()
        # id,name, phone,addr = self.fn.select_db(f"SELECT * FROM CUSTOMER WHERE ID = '{self.id_label.text()}'")[0]
        my_dialog = NewEntry()
        my_dialog.new_cust_entry(id)
        my_dialog.exec()
        self.refresh_data()
        # self.close()
        # self.show()

    def show_context_menu_money(self, position):
        row = self.tableWidget_money.currentRow()
        context_menu = QMenu()
        delete_date_money = QAction("Delete Data for Date")
        delete_date_money.triggered.connect(
            lambda: self.Delete_Date_money(row))
        context_menu.addAction(delete_date_money)
        context_menu.exec(
            self.tableWidget_money.viewport().mapToGlobal(position))
        pass

    def show_context_menu(self, position):
        row = self.tableWidget_desc.currentRow()
        context_menu = QMenu()
        Edit_action = QAction("Edit Date")
        Edit_action.triggered.connect(lambda: self.edit_date(row))
        context_menu.addAction(Edit_action)
        context_menu.exec(
            self.tableWidget_desc.viewport().mapToGlobal(position))

    def edit_date(self, row):
        id, get_date_table, time_table = self.id_label.text(), self.tableWidget_desc.item(
            row, 0).text(), self.tableWidget_desc.item(row, 5).text()
        fn = all_function()
        get_date = fn.convert_date_format(get_date_table)
        time = fn.time_convert(time_table)
        result = DialogBox.show_yes_no_dialog(
            "Are you sure you want to edit date " + get_date + "?")
        if result == False:
            return
        id, name, place, phone = self.fn.select_db(
            f"SELECT * FROM CUSTOMER WHERE ID = '{id}'")[0]
        table = self.fn.select_db(
            f"SELECT prod,quantity,rate,value FROM PRODUCT WHERE ID = '{id}' AND DATE = '{get_date}' AND TIME = '{time}'")
        method, give = self.fn.select_db(
            f"SELECT METHOD,GIVE FROM Money WHERE ID = '{id}' AND DATE = '{get_date}' AND TIME = '{time}' ")[0]
        # rem = self
        # print(method,give)
        # print(table,id,name,place,phone)
        if method == "Udhar" or method == "Jma":
            method = "Udhar/Jma"
        my_dialog = NewEntry()
        my_dialog.Edit_Record(id, name, place, phone,
                              table, get_date_table, time_table, method, give)
        my_dialog.exec()
        self.refresh_data()
    # delete all record form product and money table for selected date

    def Delete_Date_money(self, row):
        id = self.id_label.text()
        get_date = self.tableWidget_money.item(row, 0).text()
        time = self.tableWidget_money.item(row, 4).text()
        result = DialogBox.show_yes_no_dialog(
            "Are you sure you want to delete all record of date " + get_date + "?")
        if result == False:
            return

        get_date = self.fn.convert_date_format(get_date)
        time = self.fn.time_convert(time)
        query = "DELETE FROM product WHERE date = ? and id = ? and time = ?"
        val = (get_date, id, time)
        self.fn.insert_db(query, val)
        query = "DELETE FROM money WHERE date = ? and id = ? and time = ?"
        val = (get_date, id, time)
        self.fn.insert_db(query, val)
        self.tableWidget_money.clearContents()
        self.tableWidget_money.setRowCount(0)
        self.update_data(self.id_label.text())
        pass

    def Delete_Date(self, row):
        id = self.id_label.text()
        get_date = self.tableWidget_desc.item(row, 0).text()
        time = self.tableWidget_desc.item(row, 5).text()
        result = DialogBox.show_yes_no_dialog(
            "Are you sure you want to delete all record of date " + get_date + "?")
        if result == False:
            return
        query = "DELETE FROM product WHERE date = ? and id = ? and time = ?"
        val = (get_date, id, time)
        self.fn.insert_db(query, val)
        query = "DELETE FROM money WHERE date = ? and id = ? and time = ?"
        val = (get_date, id, time)
        self.fn.insert_db(query, val)
        self.tableWidget_money.clearContents()
        self.tableWidget_money.setRowCount(0)
        self.update_data(self.id_label.text())

    def add_data(self):
        try:
            # Establish SQLite connection
            # mydb = sqlite3.connect('./Main_Software/mahendra.db')
            # mycursor = mydb.cursor()
            cust_id = self.id_label.text()
            name = self.name_label.text()
            give = self.lineEdit_give.text()
            method = self.comboBox.currentText()
            comment = self.lineEdit_comment.text()
            # date = datetime.date.today().strftime("%d-%m-%Y")
            time = datetime.datetime.now().time().strftime("%H:%M:%S")
            total = "0"
            comment = "*" + comment
            # Fill customer details
            query = f"INSERT INTO Money (ID, Date,Name,Give, Total,Method, Time,comment) VALUES (?,?,?,?,?,?,?,?)"
            val = (cust_id, self.current_date, name,
                   give, total, method, time, comment)
            self.fn.insert_db(query, val)
            # mycursor.execute(query, val)
            # mydb.commit()
            # mydb.close()

        except:
            print("Error: in add data customer_details.py")

    def submit_btn(self):
        item = self.lineEdit_give
        if item is not None and item.text() != "":
            rem = item.text()
            if len(rem) == 1 and (rem in ['-', '+', '.']):
                DialogBox.show_warning_dialog(
                    "Please Enter correct Details in Pay field")
                return
            self.add_data()
            self.tableWidget_money.clearContents()
            self.tableWidget_money.setRowCount(0)
            # box = DialogBox()
            # box.show_information_dialog("Data added successfully")
            self.update_data(self.id_label.text())
            item.setText("")
            self.lineEdit_comment.setText("")

    def set_cell_background(self, table, row, column, color):
        text = table.item(row, column).text()
        item = QTableWidgetItem(text)
        item.setBackground(QColor(color))
        table.setItem(row, column, item)

    def update_data(self, cell_value):
        cust_id = cell_value
        # print(cell_value + "yes you can ")

        try:
            # Establish SQLite connection
            # mydb = sqlite3.connect('./Main_Software/mahendra.db')
            # mycursor = mydb.cursor()

            # Getting customer details
            query = f"SELECT * FROM CUSTOMER WHERE id = '{cust_id}'"
            # val = (cust_id,)
            # mycursor.execute(query, val)
            # cust_result = mycursor.fetchone()
            cust_result = self.fn.select_db(query)[0]
            # print(cust_result)
            if cust_result:
                id_, name_, phone_, place_ = cust_result
                self.name_label.setText(name_)
                self.id_label.setText(id_)
                self.phone_label.setText(phone_)
                self.place_label.setText(place_)

            # Customer product purchase details
            # prod_det = mydb.cursor()
            prod_query = f'''SELECT strftime('%d-%m-%Y', Date), prod, quantity,rate, value, CASE
        WHEN CAST(strftime('%H', time) AS INTEGER) >= 12 THEN
            CASE
                WHEN CAST(strftime('%H', time) AS INTEGER) > 12 THEN
                    printf('%02d', CAST(strftime('%H', time) AS INTEGER) - 12)
                ELSE
                    '12'
            END || ':' || 
            strftime('%M:%S', time) || ' PM'
        ELSE
            time || ' AM'
    END AS converted_time FROM PRODUCT WHERE id = '{cust_id}' ORDER BY date desc, time desc'''
            # prod_val = (cust_id,)
            # prod_det.execute(prod_query, prod_val)
            # pro_result = prod_det.fetchall()
            pro_result = self.fn.select_db(prod_query)
            # print("working")
            self.tableWidget_desc.setRowCount(0)
            for row_number, row_data in enumerate(pro_result):
                self.tableWidget_desc.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget_desc.setItem(
                        row_number, column_number, QTableWidgetItem(str(data)))

            # Money details of the customer
            # money_det = mydb.cursor()
            money_query = f'''SELECT strftime('%d-%m-%Y', Date),Give,Total, Method,CASE
        WHEN CAST(strftime('%H', time) AS INTEGER) >= 12 THEN
            CASE
                WHEN CAST(strftime('%H', time) AS INTEGER) > 12 THEN
                    printf('%02d', CAST(strftime('%H', time) AS INTEGER) - 12)
                ELSE
                    '12'
            END || ':' || 
            strftime('%M:%S', time) || ' PM'
        ELSE
            time || ' AM'
    END AS converted_time,comment from Money where id = '{cust_id}' ORDER BY date desc, time desc'''
            # money_val = (cust_id,)
            # money_det.execute(money_query, money_val)
            # money_result = money_det.fetchall()
            money_result = self.fn.select_db(money_query)
            
            for row_number, row_data in enumerate(money_result):
                self.tableWidget_money.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    # print("Data"+ str(data))
                    item = QTableWidgetItem(str(data))
                    self.tableWidget_money.setItem(
                        row_number, column_number, item)

            # rem_cursor = mydb.cursor()
            rem_calc = f"SELECT Sum(Total - Give) as Remaining from Money where id = '{cust_id}'" 
            # rem_val = (cust_id,)
            # rem_cursor.execute(rem_calc, rem_val)
            # result = rem_cursor.fetchone()
            result = self.fn.select_db(rem_calc)[0]
            result = result[0]
            if result is not None:
                result = round(result, 2)
            self.lineEdit_rem_total.setText(str(result))

            # !in below rem_cursor --> overall_total

            # rem_cursor = mydb.cursor()
            rem_calc = f"SELECT Sum(Total) as Overall_total from Money where id = '{cust_id}'" 
            # rem_val = (cust_id,)
            # rem_cursor.execute(rem_calc, rem_val)
            # result = rem_cursor.fetchone()
            result = self.fn.select_db(rem_calc)[0]
            result = result[0]
            if result is not None:
                result = round(result, 2)
            self.lineEdit_overall_total.setText(str(result))

            self.tableWidget_desc.horizontalHeader().setSectionResizeMode(
                QHeaderView.ResizeMode.Stretch)
            self.tableWidget_money.horizontalHeader().setSectionResizeMode(
                QHeaderView.ResizeMode.Stretch)
            for row in range(self.tableWidget_desc.rowCount()):
                item = QTableWidgetItem(
                    "₹ " + self.tableWidget_desc.item(row, 4).text())
                self.tableWidget_desc.setItem(row, 4, item)

            for row in range(self.tableWidget_money.rowCount()):
                item1 = QTableWidgetItem(
                    "₹ " + self.tableWidget_money.item(row, 1).text())
                item2 = QTableWidgetItem(
                    "₹ " + self.tableWidget_money.item(row, 2).text())
                self.tableWidget_money.setItem(row, 1, item1)
                self.tableWidget_money.setItem(row, 2, item2)

            # this is for tool tip and set color on cell where comment added
            self.tableWidget_money.setStyleSheet(
                "QTableView::item:alternate { background-color: #c5edea; }")
            self.tableWidget_desc.setStyleSheet(
                "QTableView::item:alternate { background-color: #c5edea; }")
            self.tool_tip()
            # self.tableWidget_desc.resizeColumnsToContents()
            # self.tableWidget_money.resizeColumnsToContents()

        except Exception as e:
            print("Error:", e)

    def show_screen_dimensions(self):
        screen = QGuiApplication.primaryScreen()
        available_geometry = screen.availableGeometry()
        screen_size = available_geometry.size()
        taskbar_height = screen.geometry().height() - available_geometry.height()

        width = screen_size.width()
        height = screen_size.height()
        return [width, height, taskbar_height - 15]

    # this is for tool tip and set color on cell where comment added
    def tool_tip(self):
        for row in range(self.tableWidget_money.rowCount()):
            data = self.tableWidget_money.item(row, 5).text()
            if data != 'None' and data != "":

                cell_text = self.tableWidget_money.item(row, 0).text()
                data = self.tableWidget_money.item(row, 5).text()
                item = QTableWidgetItem(cell_text)
                # Set color to red (adjust RGB values as needed)
                color = QColor(255, 0, 0)
                font = QFont()
                font.setBold(True)  # Set font to bold
                # Set the foreground color of the item
                item.setForeground(color)
                item.setFont(font)  # Set the font of the item
                self.tableWidget_money.setItem(row, 0, item)
                item.setToolTip(data)

                # Increase the font size of the tooltip text
                app = QApplication.instance()
                # Adjust the font size as needed
                tooltip_stylesheet = "QToolTip { font-size: 12pt; }"
                app.setStyleSheet(tooltip_stylesheet)

    def mouseMoveEvent(self, event):
        # print(event)
        # item = self.itemAt(event.pos())
        # if item:
        #     print("hoverd cell",item.text())
        QToolTip.hideText()
        super(Ui_Customer_details, self).mouseMoveEvent(event)

    def table_Data(self, table, column):
        prod_values = []
        for row in range(table.rowCount()):
            row_data = []
            for col in range(column):
                item = table.item(row, col)
                if item is not None and item.text() != "":
                    val = item.text()
                    if "₹" in val:
                        val = val.replace("₹", "Rs")
                    row_data.append(val)
            if len(row_data) > 3:
                prod_values.append(row_data)
        return prod_values

    def customer_pdf(self):
        id = self.id_label.text()
        # name = self.name_label.text()
        # address = self.place_label.text()
        # phone = self.phone_label.text()
        # first_row = ["Date", "Product",  "Quantity", "Rate","Value","Time"]
        # product = self.table_Data(self.tableWidget_desc,6)
        # product.insert(0,first_row)
        # first_row = ["Date", "Received",  "Total", "Method","Time"]
        # money = self.table_Data(self.tableWidget_money,5)
        # money.insert(0,first_row)
        InvoicePdf.generate_customer_details(id)
        self.open_pdf_in_default_browser()

    def open_pdf_in_default_browser(self):
        try:
            pdf_path = "customer_details.pdf"
            webbrowser.open(pdf_path, new=2)
        except Exception as e:
            print("Error:", e)

    def refresh_data(self):
        self.tableWidget_money.clearContents()
        self.tableWidget_money.setRowCount(0)
        self.update_data(self.id_label.text())
        pass

    def showTooltip(self, row, col):
        # Get the item at the specified row and column
        item = self.tableWidget_desc.item(row, col)
        if item is not None:
            # Get the text of the cell
            cell_text = item.text()
            # Show the tooltip
            rect = self.tableWidget_desc.visualRect(
                self.tableWidget_desc.model().index(row, col))
            QToolTip.showText(self.tableWidget_desc.mapToGlobal(
                rect.bottomRight()), cell_text)
