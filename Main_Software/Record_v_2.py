# Form implementation generated from reading ui file '.\New_record.ui'
#
# Created by: PyQt6 UI code generator 6.5.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import QDate
from PyQt6.QtWidgets import QTableWidgetItem, QMenu,QHeaderView, QTableWidget,QTreeWidgetItem
from PyQt6.QtGui import QFont, QColor, QLinearGradient,QBrush,QGuiApplication,QIcon
from PyQt6.QtCore import Qt
import sys
import sqlite3
from Customer_DetailsGUI_ui import Ui_Customer_details
from All_function import TooltipDelegate, all_function
from Customer_details_v_2 import Ui_Customer_details_v_2

class Ui_Record_v_2(object):
    def setupUi(self, Record_v_2):
        Record_v_2.setObjectName("Record_v_2")
        Record_v_2.resize(1121, 732)
        Record_v_2.setStyleSheet("QDialog{\n"
"    background-color: rgb(242,240,247);\n"
"}\n"
"QLabel {\n"
"    font-family: Russo One;\n"
"    font-size: 18px;\n"
"    border : 0px;\n"
"}\n"
"\n"
"#frame,#frame_2{\n"
"border: 2px solid #c0c0c0;\n"
"border-radius: 10px;\n"
"background-color: white;\n"
"}")
        self.gridLayout = QtWidgets.QGridLayout(Record_v_2)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(parent=Record_v_2)
        self.frame.setMinimumSize(QtCore.QSize(220, 0))
        self.frame.setMaximumSize(QtCore.QSize(230, 16777215))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_3.setObjectName("gridLayout_3")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 0, 3, 1, 1)
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setObjectName("label")
        self.gridLayout_3.addWidget(self.label, 2, 0, 1, 4, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.dateEdit = QtWidgets.QDateEdit(parent=self.frame)
        self.dateEdit.setStyleSheet("QDateEdit {\n"
"  background-color: rgb(213, 202, 255);\n"
"  border: 1px solid #dcdcdc;\n"
"  border-radius: 4px;\n"
"  selection-background-color: rgb(215, 192, 255);\n"
"  selection-color: #333333;\n"
"  font-size: 16px;\n"
"  color: #333333;\n"
"}\n"
"")
        self.dateEdit.setObjectName("dateEdit")
        self.gridLayout_3.addWidget(self.dateEdit, 0, 1, 1, 2)
        self.checkBox = QtWidgets.QCheckBox(parent=self.frame)
        self.checkBox.setObjectName("checkBox")
        self.gridLayout_3.addWidget(self.checkBox, 1, 0, 1, 4, QtCore.Qt.AlignmentFlag.AlignHCenter)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        self.treeWidget = QtWidgets.QTreeWidget(parent=Record_v_2)
        self.treeWidget.setStyleSheet("QTreeWidget {\n"
"        font-size: 16px;\n"
"        background-color: rgb(218, 245, 255);\n"
"    }\n"
"    \n"
"    QTreeWidget::item {\n"
"        padding: 10px;\n"
"    }\n"
"\n"
"    QTreeWidget::item:selected {\n"
"        background-color: #89AEF9;\n"
"        color: white;\n"
"    }\n"
"    \n"
"    QTreeWidget::item:disabled {\n"
"        background-color: #DDD;\n"
"        color: #888;\n"
"    }\n"
"    QTableWidget::item:hover {\n"
"    background-color: #E6F1FF;\n"
"}\n"
"\n"
"    \n"
"    QTreeWidget QHeaderView::section {\n"
"        background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"                                        stop:0 #4876AF, stop:1 #286090);\n"
"        color: white;\n"
"        font-weight: bold;\n"
"        padding: 4px;\n"
"        border: none;\n"
"        border-bottom: 1px solid #355F8C;\n"
"        border-radius: 4px;\n"
"        border-top-right-radius: 14px;\n"
"}\n"
"QTreeWidget::item:open:has-children {\n"
"        background-color: #007ACC;\n"
"        color: white;\n"
"        }\n"
"")
        self.treeWidget.setObjectName("treeWidget")
        self.gridLayout.addWidget(self.treeWidget, 0, 1, 1, 1)

        self.retranslateUi(Record_v_2)
        QtCore.QMetaObject.connectSlotsByName(Record_v_2)

    def retranslateUi(self, Record_v_2):
        _translate = QtCore.QCoreApplication.translate
        Record_v_2.setWindowTitle(_translate("Record_v_2", "Record"))
        self.label.setText(_translate("Record_v_2", "Total:"))
        self.checkBox.setText(_translate("Record_v_2", "Expand all"))
        self.treeWidget.headerItem().setText(0, _translate("Record_v_2", "ID"))
        self.treeWidget.headerItem().setText(1, _translate("Record_v_2", "Name"))
        self.treeWidget.headerItem().setText(2, _translate("Record_v_2", "Address"))
        self.treeWidget.headerItem().setText(3, _translate("Record_v_2", "Give"))
        self.treeWidget.headerItem().setText(4, _translate("Record_v_2", "Total"))
        self.treeWidget.headerItem().setText(5, _translate("Record_v_2", "Method"))
        self.treeWidget.headerItem().setText(6, _translate("Record_v_2", "Time"))


######################### Main code starts from here ##################################
        self.fn = all_function()
        
        self.dateEdit.setDate(QDate.currentDate())
        self.updatedate = self.dateEdit.date().toString("yyyy-MM-dd")
        self.date = self.updatedate
        self.daily_record()
        self.treeWidget.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)  # Enable custom context menu
        self.treeWidget.customContextMenuRequested.connect(self.showContextMenu)
        self.dateEdit.dateChanged.connect(self.on_date_changed)
        Record_v_2.showMaximized()
        self.checkBox.clicked.connect(self.expand_collapse_all_items)
        self.treeWidget.header().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
    
    def convert_to_string_lists(self, input_list):
        result = [[str(item) for item in sublist] for sublist in input_list]
        return result
    
    def set_font(self,index, item):
        font = QFont()
        font.setBold(True)
        font.setPointSize(11)
        item.setFont(index, font)
    
    def set_speacial_font(self, index, item):
        font = QFont()
        font.setPointSize(13)
        item.setFont(index, font)
    
    def set_background_color(self,index, item, color):
        item.setBackground(index, color)
    
    def set_Foreground_color(self,index, item, color):
        item.setForeground(index, color)
    
    def on_date_changed(self):
        self.updatedate = self.dateEdit.date().toString("yyyy-MM-dd")
        self.date = self.updatedate
        self.daily_record()    
    
    def refresh_data(self):
        self.treeWidget.clear()
        
    def expand_collapse_all_items(self):
        if self.checkBox.isChecked():
            self.expand_all_items()
        else:
            self.collapse_all_items()
        
    def expand_all_items(self):
        for item_index in range(self.treeWidget.topLevelItemCount()):
            item = self.treeWidget.topLevelItem(item_index)
            self.expand_item(item)

    def collapse_all_items(self):
        for item_index in range(self.treeWidget.topLevelItemCount()):
            item = self.treeWidget.topLevelItem(item_index)
            self.collapse_item(item)

    def expand_item(self, item):
        # Recursively expand the current item and its children
        item.setExpanded(True)
        for i in range(item.childCount()):
            child = item.child(i)
            self.expand_item(child)

    def collapse_item(self, item):
        # Recursively collapse the current item and its children
        item.setExpanded(False)
        for i in range(item.childCount()):
            child = item.child(i)
            self.collapse_item(child)
            
    def showContextMenu(self, pos):
        current_item = self.treeWidget.itemAt(pos)
        if current_item is not None and current_item.parent() is None:  # Check if the right-clicked item is the parent
            row = self.treeWidget.currentItem()
            context_menu = QMenu()
            go_to_customer = context_menu.addAction(QIcon(":/icons/icons8-name-80.png"), 'Go to Customer')
            # edit_date = context_menu.addAction('Edit Date')
            go_to_customer.triggered.connect(lambda: self.go_to_customer(row))
            context_menu.exec(self.treeWidget.viewport().mapToGlobal(pos))
    
    def go_to_customer(self,item):
        id = item.text(0)
        self.customer_dialog = QtWidgets.QDialog()
        self.customer_details_ui = Ui_Customer_details_v_2(self.customer_dialog)
        self.customer_details_ui.setupUi(self.customer_dialog)
        self.customer_details_ui.first_function(id) 
        self.customer_dialog.exec()
    
    def daily_total_count(self):
        total = self.fn.select_db(f"SELECT SUM(TOTAL) FROM MONEY where date = '{self.date}'")[0][0]
        received = self.fn.select_db(f"SELECT SUM(GIVE) FROM MONEY where date = '{self.date}'")[0][0]
        udhari = self.fn.select_db(f'''select sum(tot) as new_tot from (select sum(total - give) as tot FROM Money 
                            where id in (select id FROM Money where method IN ('Udhar','Jma','UPI','Cheque') 
                            and date = '{self.date}' and Total > 0) and date = '{self.date}' group by id) where tot>0 '''
            )[0][0]
        
        result = f'''<span style ='color: red;'>Total: </span><br> 
            ₹ {total} <br><br>
            <span style ='color: red;'>Recevied: </span><br>
            ₹ {received} <br><br>
            <span style ='color: red;'>Udhar: </span><br>
            ₹ {udhari}<br>
            '''
        self.label.setText(result)
        
    def daily_record(self):
        self.refresh_data()
        # self.date = "2023-08-18"
        products = self.fn.select_db(f'''select id, CASE
                    WHEN CAST(strftime('%H', time) AS INTEGER) >= 12 THEN
                        CASE
                            WHEN CAST(strftime('%H', time) AS INTEGER) > 12 THEN
                                printf('%02d', CAST(strftime('%H', time) AS INTEGER) - 12)
                            ELSE
                                '12'
                        END || ':' || 
                        strftime('%M:%S', time) || ' PM'
                    ELSE
                        time || ' AM'
                END AS converted_time, prod, quantity, rate,value,method from product where date = '{self.date}' order by time''')
        money = self.fn.select_db(f'''select money.id,CASE
                    WHEN CAST(strftime('%H', time) AS INTEGER) >= 12 THEN
                        CASE
                            WHEN CAST(strftime('%H', time) AS INTEGER) > 12 THEN
                                printf('%02d', CAST(strftime('%H', time) AS INTEGER) - 12)
                            ELSE
                                '12'
                        END || ':' || 
                        strftime('%M:%S', time) || ' PM'
                    ELSE
                        time || ' AM'
                END AS converted_time, money.name, Customer.address, give,total,method,comment from money,Customer where money.id = Customer.id and date = '{self.date}' order by time''')
        products = self.convert_to_string_lists(products)
        money = self.convert_to_string_lists(money)
        pro_len = len(products)
        mon_len = len(money)
        
        p, m = 0, 0
        a = 1
        while p != pro_len and m != mon_len:
            if pro_len == 0:
                break
            if (products[p][0] + products[p][1]) != (money[m][0] + money[m][1]):
                parent_item = QTreeWidgetItem(self.treeWidget, [money[m][0], money[m][2], money[m][3], money[m][4], money[m][5], money[m][6], money[m][1]])

                #set font in first parent for money
                if money[m][7] not in ["*","",None]:
                    parent_child = QTreeWidgetItem(parent_item, ["Comment: ",money[m][7]])
                    parent_child.setToolTip(1, money[m][7])
                for i in range(5):
                    self.set_font(i, parent_item)
                    self.set_Foreground_color(i, parent_item, QColor(255, 0, 0))
                m += 1
            else:
                parent_item = QTreeWidgetItem(self.treeWidget,[money[m][0], money[m][2], money[m][3], money[m][4], money[m][5], money[m][6], money[m][1]])
                parent_child = QTreeWidgetItem(parent_item, ["Product", "Quantity", "Rate", "Amount"])
                #it set backgorund color in money main parent
                for i in range(5):
                    self.set_speacial_font(i,parent_item)
                if a%2 == 0:
                    for i in range(7):
                        self.set_background_color(i, parent_item, QColor(229, 249, 255))
                        # self.set_font(i, parent_item)
                a+=1
                
                #it set the color in product first  row
                for i in range(4):
                    self.set_background_color(i, parent_child, QColor(120, 193, 243))
                    self.set_font(i, parent_child)
                
                
                
                # here we check when product purchase
                while (p != pro_len and m != mon_len) and ((products[p][0] + products[p][1]) == (money[m][0] + money[m][1])):
                    parent_child = QTreeWidgetItem(parent_item, [products[p][2], products[p][3], products[p][4], products[p][5]])
                    parent_child.setToolTip(0, products[p][2])
                    for i in range(4):
                        self.set_background_color(i, parent_child, QColor(230, 252, 255))
                    p += 1
                parent_child = QTreeWidgetItem(parent_item, ["Paid:", "₹ " + money[m][4], "Total:","₹ "+ money[m][5]])

                # here we set font andcolor in paid and total row
                for i in range(4):
                    if i%2==0:
                        self.set_Foreground_color(i, parent_child, QColor(255, 0, 0))
                    self.set_font(i, parent_child)
                    self.set_background_color(i, parent_child, QColor(200, 214, 255))
                if money[m][7] in ["*","", None]:
                    parent_child = QTreeWidgetItem(parent_item, ["Method:", money[m][6], "", ""])
                else:
                    parent_child = QTreeWidgetItem(parent_item, ["Method:", money[m][6], "Comment:", money[m][7]])
                    parent_child.setToolTip(3, money[m][7])
                #this is for method row
                for i in range(4):
                    if i%2 == 0:
                        self.set_Foreground_color(i, parent_child, QColor(255, 0, 0))
                    self.set_font(i, parent_child)
                    self.set_background_color(i, parent_child, QColor(200, 214, 255))
                m += 1

        while m != mon_len:
            parent_item = QTreeWidgetItem(self.treeWidget, [money[m][0], money[m][2], money[m][3], money[m][4], money[m][5], money[m][6], money[m][1]])
            if money[m][7] not in ["*","",None]:
                parent_child = QTreeWidgetItem(parent_item, ["Comment: ",money[m][7]])
                parent_child.setToolTip(1, money[m][7])
            for i in range(7):
                self.set_font(i, parent_item)
                self.set_Foreground_color(i, parent_item, QColor(255, 0, 0))
            m += 1

        self.daily_total_count()

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     Record_v_2 = QtWidgets.QDialog()
#     ui = Ui_Record_v_2()
#     ui.setupUi(Record_v_2)
#     Record_v_2.show()
#     sys.exit(app.exec())
